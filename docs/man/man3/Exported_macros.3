.TH "Exported_macros" 3 "Version 1.0.0" "Radar" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Exported_macros \- Exported_macros
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIS_ADC_ALL_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBADC1\fP)"
.br
.ti -1c
.RI "#define \fBIS_ADC_COMMON_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBADC1_COMMON\fP)"
.br
.ti -1c
.RI "#define \fBIS_CRC_ALL_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBCRC\fP)"
.br
.ti -1c
.RI "#define \fBIS_DMA_ALL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_DMAMUX_ALL_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBDMAMUX1\fP)"
.br
.ti -1c
.RI "#define \fBIS_DMAMUX_REQUEST_GEN_ALL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_GPIO_ALL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_GPIO_AF_INSTANCE\fP(INSTANCE)   \fBIS_GPIO_ALL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_GPIO_LOCK_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_I2C_ALL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_RTC_ALL_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBRTC\fP)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_ALL_INSTANCE\fP(INSTANCE)   (((INSTANCE) == \fBI2C1\fP))"
.br
.ti -1c
.RI "#define \fBIS_I2C_WAKEUP_FROMSTOP_INSTANCE\fP(INSTANCE)   (((INSTANCE) == \fBI2C1\fP))"
.br
.ti -1c
.RI "#define \fBIS_SPI_ALL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_I2S_ALL_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBSPI1\fP)"
.br
.ti -1c
.RI "#define \fBIS_TIM_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_32B_COUNTER_INSTANCE\fP(INSTANCE)   (0)"
.br
.ti -1c
.RI "#define \fBIS_TIM_BREAK_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_BREAKSOURCE_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_BKIN2_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CC1_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CC2_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CC3_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CC4_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CC5_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CC6_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CCDMA_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_DMA_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_DMA_CC_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_DMABURST_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CCX_INSTANCE\fP(INSTANCE,  CHANNEL)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CCXN_INSTANCE\fP(INSTANCE,  CHANNEL)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CLOCK_DIVISION_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CLOCKSOURCE_TIX_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_CLOCKSOURCE_ITRX_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_COMBINED3PHASEPWM_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"
.br
.ti -1c
.RI "#define \fBIS_TIM_COMMUTATION_EVENT_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_COUNTER_MODE_SELECT_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_ENCODER_INTERFACE_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_HALL_SENSOR_INTERFACE_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_ETR_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_ETRSEL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_MASTER_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_SLAVE_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_OCXREF_CLEAR_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_OCCS_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_REMAP_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"
.br
.ti -1c
.RI "#define \fBIS_TIM_REPETITION_COUNTER_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_TRGO2_INSTANCE\fP(INSTANCE)   (((INSTANCE) == \fBTIM1\fP))"
.br
.ti -1c
.RI "#define \fBIS_TIM_XOR_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_TISEL_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_TIM_ADVANCED_INSTANCE\fP(INSTANCE)   (((INSTANCE) == \fBTIM1\fP))"
.br
.ti -1c
.RI "#define \fBIS_UART_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_USART_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_UART_HWFLOW_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_SMARTCARD_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"
.br
.ti -1c
.RI "#define \fBIS_USART_AUTOBAUDRATE_DETECTION_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"
.br
.ti -1c
.RI "#define \fBIS_UART_HALFDUPLEX_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_UART_LIN_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"
.br
.ti -1c
.RI "#define \fBIS_UART_WAKEUP_FROMSTOP_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"
.br
.ti -1c
.RI "#define \fBIS_UART_DRIVER_ENABLE_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_UART_SPI_SLAVE_INSTANCE\fP(INSTANCE)"
.br
.ti -1c
.RI "#define \fBIS_UART_FIFO_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"
.br
.ti -1c
.RI "#define \fBIS_IRDA_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"
.br
.ti -1c
.RI "#define \fBIS_LPUART_INSTANCE\fP(INSTANCE)   (0U)"
.br
.ti -1c
.RI "#define \fBIS_IWDG_ALL_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBIWDG\fP)"
.br
.ti -1c
.RI "#define \fBIS_WWDG_ALL_INSTANCE\fP(INSTANCE)   ((INSTANCE) == \fBWWDG\fP)"
.br
.ti -1c
.RI "#define \fBSVC_IRQn\fP   \fBSVCall_IRQn\fP"
.br
.ti -1c
.RI "#define \fBSET_BIT\fP(REG,  BIT)   ((REG) |= (BIT))"
.br
.ti -1c
.RI "#define \fBCLEAR_BIT\fP(REG,  BIT)   ((REG) &= ~(BIT))"
.br
.ti -1c
.RI "#define \fBREAD_BIT\fP(REG,  BIT)   ((REG) & (BIT))"
.br
.ti -1c
.RI "#define \fBCLEAR_REG\fP(REG)   ((REG) = (0x0))"
.br
.ti -1c
.RI "#define \fBWRITE_REG\fP(REG,  VAL)   ((REG) = (VAL))"
.br
.ti -1c
.RI "#define \fBREAD_REG\fP(REG)   ((REG))"
.br
.ti -1c
.RI "#define \fBMODIFY_REG\fP(REG,  CLEARMASK,  SETMASK)   \fBWRITE_REG\fP((REG), (((\fBREAD_REG\fP(REG)) & (~(CLEARMASK))) | (SETMASK)))"
.br
.ti -1c
.RI "#define \fBATOMIC_SET_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBATOMIC_CLEAR_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBATOMIC_MODIFY_REG\fP(REG,  CLEARMSK,  SETMASK)"
.br
.ti -1c
.RI "#define \fBATOMIC_SETH_BIT\fP(REG,  BIT)   \fBATOMIC_SET_BIT\fP(REG, BIT)                                   \\"
.br
.ti -1c
.RI "#define \fBATOMIC_CLEARH_BIT\fP(REG,  BIT)   \fBATOMIC_CLEAR_BIT\fP(REG, BIT)                               \\"
.br
.ti -1c
.RI "#define \fBATOMIC_MODIFYH_REG\fP(REG,  CLEARMSK,  SETMASK)   \fBATOMIC_MODIFY_REG\fP(REG, CLEARMSK, SETMASK) \\"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define ATOMIC_CLEAR_BIT(REG, BIT)"
\fBValue:\fP.PP
.nf
  do {                                                       \\
    uint32_t primask;                                        \\
    primask = __get_PRIMASK();                               \\
    __set_PRIMASK(1);                                        \\
    CLEAR_BIT((REG), (BIT));                                 \\
    __set_PRIMASK(primask);                                  \\
  } while(0)
.fi

.SS "#define ATOMIC_CLEARH_BIT(REG, BIT)   \fBATOMIC_CLEAR_BIT\fP(REG, BIT)                               \\"

.SS "#define ATOMIC_MODIFY_REG(REG, CLEARMSK, SETMASK)"
\fBValue:\fP.PP
.nf
  do {                                                       \\
    uint32_t primask;                                        \\
    primask = __get_PRIMASK();                               \\
    __set_PRIMASK(1);                                        \\
    MODIFY_REG((REG), (CLEARMSK), (SETMASK));                \\
    __set_PRIMASK(primask);                                  \\
  } while(0)
.fi

.SS "#define ATOMIC_MODIFYH_REG(REG, CLEARMSK, SETMASK)   \fBATOMIC_MODIFY_REG\fP(REG, CLEARMSK, SETMASK) \\"

.SS "#define ATOMIC_SET_BIT(REG, BIT)"
\fBValue:\fP.PP
.nf
  do {                                                       \\
    uint32_t primask;                                        \\
    primask = __get_PRIMASK();                               \\
    __set_PRIMASK(1);                                        \\
    SET_BIT((REG), (BIT));                                   \\
    __set_PRIMASK(primask);                                  \\
  } while(0)
.fi

.SS "#define ATOMIC_SETH_BIT(REG, BIT)   \fBATOMIC_SET_BIT\fP(REG, BIT)                                   \\"

.SS "#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))"

.SS "#define CLEAR_REG(REG)   ((REG) = (0x0))"

.SS "#define IS_ADC_ALL_INSTANCE(INSTANCE)   ((INSTANCE) == \fBADC1\fP)"

.SS "#define IS_ADC_COMMON_INSTANCE(INSTANCE)   ((INSTANCE) == \fBADC1_COMMON\fP)"

.SS "#define IS_CRC_ALL_INSTANCE(INSTANCE)   ((INSTANCE) == \fBCRC\fP)"

.SS "#define IS_DMA_ALL_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                       (((INSTANCE) == DMA1_Channel1) || \\
                                       ((INSTANCE) == DMA1_Channel2) || \\
                                       ((INSTANCE) == DMA1_Channel3) || \\
                                       ((INSTANCE) == DMA1_Channel4) || \\
                                       ((INSTANCE) == DMA1_Channel5))
.fi

.SS "#define IS_DMAMUX_ALL_INSTANCE(INSTANCE)   ((INSTANCE) == \fBDMAMUX1\fP)"

.SS "#define IS_DMAMUX_REQUEST_GEN_ALL_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                      (((INSTANCE) == DMAMUX1_RequestGenerator0) || \\
                                                      ((INSTANCE) == DMAMUX1_RequestGenerator1) || \\
                                                      ((INSTANCE) == DMAMUX1_RequestGenerator2) || \\
                                                      ((INSTANCE) == DMAMUX1_RequestGenerator3))
.fi

.SS "#define IS_GPIO_AF_INSTANCE(INSTANCE)   \fBIS_GPIO_ALL_INSTANCE\fP(INSTANCE)"

.SS "#define IS_GPIO_ALL_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                        (((INSTANCE) == GPIOA) || \\
                                        ((INSTANCE) == GPIOB) || \\
                                        ((INSTANCE) == GPIOC) || \\
                                        ((INSTANCE) == GPIOD) || \\
                                        ((INSTANCE) == GPIOF))
.fi

.SS "#define IS_GPIO_LOCK_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                         (((INSTANCE) == GPIOA) || \\
                                         ((INSTANCE) == GPIOB) || \\
                                         ((INSTANCE) == GPIOC))
.fi

.SS "#define IS_I2C_ALL_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                       (((INSTANCE) == I2C1) || \\
                                       ((INSTANCE) == I2C2))
.fi

.SS "#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE)   (((INSTANCE) == \fBI2C1\fP))"

.SS "#define IS_I2S_ALL_INSTANCE(INSTANCE)   ((INSTANCE) == \fBSPI1\fP)"

.SS "#define IS_IRDA_INSTANCE(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"

.SS "#define IS_IWDG_ALL_INSTANCE(INSTANCE)   ((INSTANCE) == \fBIWDG\fP)"

.SS "#define IS_LPUART_INSTANCE(INSTANCE)   (0U)"

.SS "#define IS_RTC_ALL_INSTANCE(INSTANCE)   ((INSTANCE) == \fBRTC\fP)"

.SS "#define IS_SMARTCARD_INSTANCE(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"

.SS "#define IS_SMBUS_ALL_INSTANCE(INSTANCE)   (((INSTANCE) == \fBI2C1\fP))"

.SS "#define IS_SPI_ALL_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                       (((INSTANCE) == SPI1) || \\
                                       ((INSTANCE) == SPI2))
.fi

.SS "#define IS_TIM_32B_COUNTER_INSTANCE(INSTANCE)   (0)"

.SS "#define IS_TIM_ADVANCED_INSTANCE(INSTANCE)   (((INSTANCE) == \fBTIM1\fP))"

.SS "#define IS_TIM_BKIN2_INSTANCE(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"

.SS "#define IS_TIM_BREAK_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)    || \\
                                            ((INSTANCE) == TIM16)   || \\
                                            ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_BREAKSOURCE_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                               (((INSTANCE) == TIM1)   || \\
                                               ((INSTANCE) == TIM16)  || \\
                                               ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_CC1_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                         (((INSTANCE) == TIM1)   || \\
                                         ((INSTANCE) == TIM3)   || \\
                                         ((INSTANCE) == TIM14)  || \\
                                         ((INSTANCE) == TIM16)  || \\
                                         ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_CC2_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                         (((INSTANCE) == TIM1)   || \\
                                         ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_CC3_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                         (((INSTANCE) == TIM1)   || \\
                                         ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_CC4_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                         (((INSTANCE) == TIM1)   || \\
                                         ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_CC5_INSTANCE(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"

.SS "#define IS_TIM_CC6_INSTANCE(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"

.SS "#define IS_TIM_CCDMA_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)   || \\
                                            ((INSTANCE) == TIM16)  || \\
                                            ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_CCX_INSTANCE(INSTANCE, CHANNEL)"
\fBValue:\fP.PP
.nf
    ((((INSTANCE) == TIM1) &&                  \\
     (((CHANNEL) == TIM_CHANNEL_1) ||          \\
      ((CHANNEL) == TIM_CHANNEL_2) ||          \\
      ((CHANNEL) == TIM_CHANNEL_3) ||          \\
      ((CHANNEL) == TIM_CHANNEL_4) ||          \\
      ((CHANNEL) == TIM_CHANNEL_5) ||          \\
      ((CHANNEL) == TIM_CHANNEL_6)))           \\
     ||                                        \\
     (((INSTANCE) == TIM3) &&                  \\
     (((CHANNEL) == TIM_CHANNEL_1) ||          \\
      ((CHANNEL) == TIM_CHANNEL_2) ||          \\
      ((CHANNEL) == TIM_CHANNEL_3) ||          \\
      ((CHANNEL) == TIM_CHANNEL_4)))           \\
     ||                                        \\
     (((INSTANCE) == TIM14) &&                 \\
     (((CHANNEL) == TIM_CHANNEL_1)))           \\
     ||                                        \\
     (((INSTANCE) == TIM16) &&                 \\
     (((CHANNEL) == TIM_CHANNEL_1)))           \\
     ||                                        \\
     (((INSTANCE) == TIM17) &&                 \\
      (((CHANNEL) == TIM_CHANNEL_1))))
.fi

.SS "#define IS_TIM_CCXN_INSTANCE(INSTANCE, CHANNEL)"
\fBValue:\fP.PP
.nf
   ((((INSTANCE) == TIM1) &&                    \\
     (((CHANNEL) == TIM_CHANNEL_1) ||           \\
      ((CHANNEL) == TIM_CHANNEL_2) ||           \\
      ((CHANNEL) == TIM_CHANNEL_3)))            \\
    ||                                          \\
    (((INSTANCE) == TIM16) &&                   \\
     ((CHANNEL) == TIM_CHANNEL_1))              \\
    ||                                          \\
    (((INSTANCE) == TIM17) &&                   \\
     ((CHANNEL) == TIM_CHANNEL_1)))
.fi

.SS "#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                    (((INSTANCE) == TIM1)    || \\
                                                    ((INSTANCE) == TIM3)    || \\
                                                    ((INSTANCE) == TIM14)   || \\
                                                    ((INSTANCE) == TIM16)   || \\
                                                    ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                        (((INSTANCE) == TIM1) || \\
                                                        ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                        (((INSTANCE) == TIM1) || \\
                                                        ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                        (((INSTANCE) == TIM1) || \\
                                                        ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                        (((INSTANCE) == TIM1) || \\
                                                        ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_COMBINED3PHASEPWM_INSTANCE(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"

.SS "#define IS_TIM_COMMUTATION_EVENT_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                     (((INSTANCE) == TIM1)   || \\
                                                     ((INSTANCE) == TIM16)  || \\
                                                     ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                        (((INSTANCE) == TIM1) || \\
                                                        ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_DMA_CC_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)   || \\
                                            ((INSTANCE) == TIM3)   || \\
                                            ((INSTANCE) == TIM14)  || \\
                                            ((INSTANCE) == TIM16)  || \\
                                            ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_DMA_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)   || \\
                                            ((INSTANCE) == TIM3)   || \\
                                            ((INSTANCE) == TIM16)  || \\
                                            ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_DMABURST_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)   || \\
                                            ((INSTANCE) == TIM3)   || \\
                                            ((INSTANCE) == TIM16)  || \\
                                            ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                      (((INSTANCE) == TIM1)  || \\
                                                      ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_ETR_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)  || \\
                                            ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_ETRSEL_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                             (((INSTANCE) == TIM1)  || \\
                                             ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                         (((INSTANCE) == TIM1)   || \\
                                                         ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                         (((INSTANCE) == TIM1)   || \\
                                         ((INSTANCE) == TIM3)   || \\
                                         ((INSTANCE) == TIM14)  || \\
                                         ((INSTANCE) == TIM16)  || \\
                                         ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_MASTER_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)  || \\
                                            ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_OCCS_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                       (((INSTANCE) == TIM1)  || \\
                                                       ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                       (((INSTANCE) == TIM1) || \\
                                                       ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_REMAP_INSTANCE(INSTANCE)   ((INSTANCE) == \fBTIM1\fP)"

.SS "#define IS_TIM_REPETITION_COUNTER_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                       (((INSTANCE) == TIM1)  || \\
                                                       ((INSTANCE) == TIM16) || \\
                                                       ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_SLAVE_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)  || \\
                                            ((INSTANCE) == TIM3))
.fi

.SS "#define IS_TIM_TISEL_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                         (((INSTANCE) == TIM1)   || \\
                                         ((INSTANCE) == TIM3)   || \\
                                         ((INSTANCE) == TIM14)  || \\
                                         ((INSTANCE) == TIM16)  || \\
                                         ((INSTANCE) == TIM17))
.fi

.SS "#define IS_TIM_TRGO2_INSTANCE(INSTANCE)   (((INSTANCE) == \fBTIM1\fP))"

.SS "#define IS_TIM_XOR_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                            (((INSTANCE) == TIM1)   || \\
                                            ((INSTANCE) == TIM3))
.fi

.SS "#define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                      (((INSTANCE) == USART1) || \\
                                                      ((INSTANCE) == USART2))
.fi

.SS "#define IS_UART_FIFO_INSTANCE(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"

.SS "#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                                 (((INSTANCE) == USART1) || \\
                                                 ((INSTANCE) == USART2))
.fi

.SS "#define IS_UART_HWFLOW_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                           (((INSTANCE) == USART1) || \\
                                           ((INSTANCE) == USART2))
.fi

.SS "#define IS_UART_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                    (((INSTANCE) == USART1) || \\
                                    ((INSTANCE) == USART2))
.fi

.SS "#define IS_UART_LIN_INSTANCE(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"

.SS "#define IS_UART_SPI_SLAVE_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                              (((INSTANCE) == USART1) || \\
                                              ((INSTANCE) == USART2))
.fi

.SS "#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"

.SS "#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE)   ((INSTANCE) == \fBUSART1\fP)"

.SS "#define IS_USART_INSTANCE(INSTANCE)"
\fBValue:\fP.PP
.nf
                                     (((INSTANCE) == USART1) || \\
                                     ((INSTANCE) == USART2))
.fi

.SS "#define IS_WWDG_ALL_INSTANCE(INSTANCE)   ((INSTANCE) == \fBWWDG\fP)"

.SS "#define MODIFY_REG(REG, CLEARMASK, SETMASK)   \fBWRITE_REG\fP((REG), (((\fBREAD_REG\fP(REG)) & (~(CLEARMASK))) | (SETMASK)))"

.SS "#define READ_BIT(REG, BIT)   ((REG) & (BIT))"

.SS "#define READ_REG(REG)   ((REG))"

.SS "#define SET_BIT(REG, BIT)   ((REG) |= (BIT))"

.SS "#define SVC_IRQn   \fBSVCall_IRQn\fP"

.SS "#define WRITE_REG(REG, VAL)   ((REG) = (VAL))"

.SH "Author"
.PP 
Generated automatically by Doxygen for Radar from the source code\&.
