.TH "RadarApp/usart_custom/usart_custom.c" 3 "Version 1.0.0" "Radar" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RadarApp/usart_custom/usart_custom.c \- Source file for custom uart handling, consists of all used variables, enums or functions that are connected directly with uart communication\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include 'usart\&.h'\fP
.br
\fC#include <stm32g0xx_hal_dma\&.h>\fP
.br
\fC#include 'usart_custom\&.h'\fP
.br
\fC#include 'radar\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBuartCustomInit\fP (\fBUART_Custom_HandleTypeDef\fP *huartCustom, \fBUART_HandleTypeDef\fP *huart, uint16_t rxDataLen, uint16_t txDataLen)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBuartCustomReceiveDMA\fP (\fBUART_Custom_HandleTypeDef\fP *huartCustom)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBuartCustomTransmitDMA\fP (\fBUART_Custom_HandleTypeDef\fP *huartCustom, uint16_t msgLen)"
.br
.ti -1c
.RI "\fBCommandType\fP \fBCommandDecode\fP (uint8_t *data, uint16_t dataLen)"
.br
.ti -1c
.RI "void \fBuartQueueReceive\fP (volatile \fBUART_Queue\fP *uartQueue)"
.br
.ti -1c
.RI "void \fBuartQueueInit\fP (volatile \fBUART_Queue\fP *uartQueue)"
.br
.ti -1c
.RI "void \fBuartQueueAdd\fP (volatile \fBUART_Queue\fP *uartQueue, uint8_t *dataTxSource, uint16_t msgLen)"
.br
.ti -1c
.RI "void \fBuartQueueClear\fP (volatile \fBUART_Queue\fP *uartQueue)"
.br
.ti -1c
.RI "void \fBuartQueueTransmit\fP (volatile \fBUART_Queue\fP *uartQueue, \fBUART_Custom_HandleTypeDef\fP *huartCustom)"
.br
.ti -1c
.RI "void \fBHAL_UARTEx_RxEventCallback\fP (\fBUART_HandleTypeDef\fP *huart, uint16_t Size)"
.br
.ti -1c
.RI "void \fBHAL_UART_TxCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_ErrorCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBUART_Custom_HandleTypeDef\fP \fBhuartPC\fP"
.br
.ti -1c
.RI "\fBDMA_HandleTypeDef\fP \fBhdma_usart1_rx\fP"
.br
.ti -1c
.RI "\fBDMA_HandleTypeDef\fP \fBhdma_usart1_tx\fP"
.br
.ti -1c
.RI "\fBUART_Queue\fP \fBuartQueuePC\fP"
.br
.ti -1c
.RI "\fBradarStruct\fP \fBradar\fP"
.br
.ti -1c
.RI "\fBdrawHelperStruct\fP \fBdrawHelper\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Source file for custom uart handling, consists of all used variables, enums or functions that are connected directly with uart communication\&. 


.PP
\fBAuthor\fP
.RS 4
Kamil Kosnik, Kacper Radzikowski 
.RE
.PP
\fBSee also\fP
.RS 4
https://github.com/FRSH-0109/Radar_Project_PMIK_2023Z 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "\fBCommandType\fP CommandDecode (uint8_t * data, uint16_t dataLen)"
Function for checking if any of uart commands is received
.PP
\fBParameters\fP
.RS 4
\fIdata\fP pointer to uin8_t type array 
.br
\fIdataLen\fP length of data to decoded 
.RE
.PP
\fBReturns\fP
.RS 4
CommandType which was(or not) decoded 
.RE
.PP

.SS "void uartCustomInit (\fBUART_Custom_HandleTypeDef\fP * huartCustom, \fBUART_HandleTypeDef\fP * huart, uint16_t rxDataLen, uint16_t txDataLen)"
Function for receiving next waiting data in queue
.PP
\fBParameters\fP
.RS 4
\fIhuartCustom\fP pointer to \fBUART_Custom_HandleTypeDef\fP struct instance param huart pointer to UART_HandleTypeDef struct instance param rxDataLen value for maximum rx data length param txDataLen value for maximum tx data length 
.RE
.PP

.SS "\fBHAL_StatusTypeDef\fP uartCustomReceiveDMA (\fBUART_Custom_HandleTypeDef\fP * huartCustom)\fC [inline]\fP"
Function for calling receiving process via uart with DMA
.PP
\fBParameters\fP
.RS 4
\fIhuartCustom\fP pointer to \fBUART_Custom_HandleTypeDef\fP struct instance 
.RE
.PP

.SS "\fBHAL_StatusTypeDef\fP uartCustomTransmitDMA (\fBUART_Custom_HandleTypeDef\fP * huartCustom, uint16_t msgLen)\fC [inline]\fP"
Function for calling DMA transmit via uart
.PP
\fBParameters\fP
.RS 4
\fIhuartCustom\fP pointer to \fBUART_Custom_HandleTypeDef\fP struct instance 
.br
\fImsgLen\fP value for maximum tx data length 
.RE
.PP

.SS "void uartQueueAdd (volatile \fBUART_Queue\fP * uartQueue, uint8_t * dataTxSource, uint16_t msgLen)\fC [inline]\fP"
Function for adding next data to be send via uart queue
.PP
\fBParameters\fP
.RS 4
\fIuartQueue\fP pointer to \fBUART_Queue\fP struct instance 
.br
\fIdataTxSource\fP pointer to data array to be added to queue 
.br
\fImsgLen\fP value for added data buffer length 
.RE
.PP

.SS "void uartQueueClear (volatile \fBUART_Queue\fP * uartQueue)\fC [inline]\fP"
Function for clearing whole uart structure
.PP
\fBParameters\fP
.RS 4
\fIuartQueue\fP pointer to \fBUART_Queue\fP struct instance 
.RE
.PP

.SS "void uartQueueInit (volatile \fBUART_Queue\fP * uartQueue)"
Function for init uart queue structure
.PP
\fBParameters\fP
.RS 4
\fIuartQueue\fP pointer to \fBUART_Queue\fP struct instance 
.RE
.PP

.SS "void uartQueueReceive (volatile \fBUART_Queue\fP * uartQueue)\fC [inline]\fP"
Function for receiving next waiting data in queue
.PP
\fBParameters\fP
.RS 4
\fIuartQueue\fP pointer to \fBUART_Queue\fP struct instance 
.RE
.PP

.SS "void uartQueueTransmit (volatile \fBUART_Queue\fP * uartQueue, \fBUART_Custom_HandleTypeDef\fP * huartCustom)\fC [inline]\fP"
Function for transmitting next data in queue
.PP
\fBParameters\fP
.RS 4
\fIuartQueue\fP pointer to \fBUART_Queue\fP struct instance 
.br
\fIhuartCustom\fP pointer to \fBUART_Custom_HandleTypeDef\fP struct instance 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBdrawHelperStruct\fP drawHelper\fC [extern]\fP"

.SS "\fBDMA_HandleTypeDef\fP hdma_usart1_rx\fC [extern]\fP"

.SS "\fBDMA_HandleTypeDef\fP hdma_usart1_tx\fC [extern]\fP"

.SS "\fBUART_Custom_HandleTypeDef\fP huartPC\fC [extern]\fP"

.SS "\fBradarStruct\fP radar\fC [extern]\fP"

.SS "\fBUART_Queue\fP uartQueuePC\fC [extern]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for Radar from the source code\&.
