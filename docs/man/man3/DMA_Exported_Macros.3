.TH "DMA_Exported_Macros" 3 "Version 1.0.0" "Radar" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DMA_Exported_Macros \- DMA Exported Macros
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__HAL_DMA_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_DMA_STATE_RESET\fP)"
.br
.RI "Reset DMA handle state\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CCR |=  \fBDMA_CCR_EN\fP)"
.br
.RI "Enable the specified DMA Channel\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CCR &=  ~\fBDMA_CCR_EN\fP)"
.br
.RI "Disable the specified DMA Channel\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_TC_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Channel transfer complete flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_HT_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Channel half transfer complete flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_TE_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Channel transfer error flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_GI_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Channel Global interrupt flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_FLAG\fP(__HANDLE__,  __FLAG__)   (\fBDMA1\fP\->ISR & (__FLAG__))"
.br
.RI "Get the DMA Channel pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)   (\fBDMA1\fP\->IFCR |= (__FLAG__))"
.br
.RI "Clear the DMA Channel pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   ((__HANDLE__)\->Instance\->CCR |= (__INTERRUPT__))"
.br
.RI "Enable the specified DMA Channel interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   ((__HANDLE__)\->Instance\->CCR &= ~(__INTERRUPT__))"
.br
.RI "Disable the specified DMA Channel interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)   (((__HANDLE__)\->Instance\->CCR & (__INTERRUPT__)))"
.br
.RI "Check whether the specified DMA Channel interrupt is enabled or disabled\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_COUNTER\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CNDTR)"
.br
.RI "Returns the number of remaining data units in the current DMA Channel transfer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define __HAL_DMA_CLEAR_FLAG(__HANDLE__, __FLAG__)   (\fBDMA1\fP\->IFCR |= (__FLAG__))"

.PP
Clear the DMA Channel pending flags\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.br
\fI__FLAG__\fP specifies the flag to clear\&. This parameter can be any combination of the following values: 
.PD 0
.IP "\(bu" 1
DMA_FLAG_TCx: Transfer complete flag 
.IP "\(bu" 1
DMA_FLAG_HTx: Half transfer complete flag 
.IP "\(bu" 1
DMA_FLAG_TEx: Transfer error flag 
.IP "\(bu" 1
DMA_FLAG_GIx: Global interrupt flag Where x can be 1 to max Channel supported by the product to select the DMA Channel flag\&. 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_DMA_DISABLE(__HANDLE__)   ((__HANDLE__)\->Instance\->CCR &=  ~\fBDMA_CCR_EN\fP)"

.PP
Disable the specified DMA Channel\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_DMA_DISABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)\->Instance\->CCR &= ~(__INTERRUPT__))"

.PP
Disable the specified DMA Channel interrupts\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.br
\fI__INTERRUPT__\fP specifies the DMA interrupt sources to be enabled or disabled\&. This parameter can be any combination of the following values: 
.PD 0
.IP "\(bu" 1
DMA_IT_TC: Transfer complete interrupt mask 
.IP "\(bu" 1
DMA_IT_HT: Half transfer complete interrupt mask 
.IP "\(bu" 1
DMA_IT_TE: Transfer error interrupt mask 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_DMA_ENABLE(__HANDLE__)   ((__HANDLE__)\->Instance\->CCR |=  \fBDMA_CCR_EN\fP)"

.PP
Enable the specified DMA Channel\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_DMA_ENABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)\->Instance\->CCR |= (__INTERRUPT__))"

.PP
Enable the specified DMA Channel interrupts\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.br
\fI__INTERRUPT__\fP specifies the DMA interrupt sources to be enabled or disabled\&. This parameter can be any combination of the following values: 
.PD 0
.IP "\(bu" 1
DMA_IT_TC: Transfer complete interrupt mask 
.IP "\(bu" 1
DMA_IT_HT: Half transfer complete interrupt mask 
.IP "\(bu" 1
DMA_IT_TE: Transfer error interrupt mask 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_DMA_GET_COUNTER(__HANDLE__)   ((__HANDLE__)\->Instance\->CNDTR)"

.PP
Returns the number of remaining data units in the current DMA Channel transfer\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP number of remaining data units in the current DMA Channel transfer\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__)   (\fBDMA1\fP\->ISR & (__FLAG__))"

.PP
Get the DMA Channel pending flags\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.br
\fI__FLAG__\fP Get the specified flag\&. This parameter can be any combination of the following values: 
.PD 0
.IP "\(bu" 1
DMA_FLAG_TCx: Transfer complete flag 
.IP "\(bu" 1
DMA_FLAG_HTx: Half transfer complete flag 
.IP "\(bu" 1
DMA_FLAG_TEx: Transfer error flag 
.IP "\(bu" 1
DMA_FLAG_GIx: Global interrupt flag Where x can be 1 to max Channel supported by the product to select the DMA Channel flag\&. 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP state of FLAG (SET or RESET)\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP.PP
.nf
(((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_GI1 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_GI2 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_GI3 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_GI4 :\\
   DMA_FLAG_GI5)
.fi

.PP
Return the current DMA Channel Global interrupt flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified transfer error flag index\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP.PP
.nf
(((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 :\\
   DMA_FLAG_HT5)
.fi

.PP
Return the current DMA Channel half transfer complete flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified half transfer complete flag index\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)   (((__HANDLE__)\->Instance\->CCR & (__INTERRUPT__)))"

.PP
Check whether the specified DMA Channel interrupt is enabled or disabled\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.br
\fI__INTERRUPT__\fP specifies the DMA interrupt source to check\&. This parameter can be one of the following values: 
.PD 0
.IP "\(bu" 1
DMA_IT_TC: Transfer complete interrupt mask 
.IP "\(bu" 1
DMA_IT_HT: Half transfer complete interrupt mask 
.IP "\(bu" 1
DMA_IT_TE: Transfer error interrupt mask 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP state of DMA_IT (SET or RESET)\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP.PP
.nf
(((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 :\\
   DMA_FLAG_TC5)
.fi

.PP
Return the current DMA Channel transfer complete flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified transfer complete flag index\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP.PP
.nf
(((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 :\\
 ((uint32_t)((__HANDLE__)\->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 :\\
   DMA_FLAG_TE5)
.fi

.PP
Return the current DMA Channel transfer error flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified transfer error flag index\&. 
.RE
.PP

.SS "#define __HAL_DMA_RESET_HANDLE_STATE(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_DMA_STATE_RESET\fP)"

.PP
Reset DMA handle state\&. 
.PP
\fBParameters\fP
.RS 4
\fI__HANDLE__\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Radar from the source code\&.
