
Radar_PMIK_STM32G030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002304  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002450  08002450  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002450  08002450  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002450  08002450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002454  08002454  00012454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002464  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099ac  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194d  00000000  00000000  000299e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140a3  00000000  00000000  0002c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b921  00000000  00000000  0004076b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000800c4  00000000  00000000  0004c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc150  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  000cc1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080023a4 	.word	0x080023a4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080023a4 	.word	0x080023a4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <MX_GPIO_Init+0x28>)
 8000220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <MX_GPIO_Init+0x28>)
 8000224:	2101      	movs	r1, #1
 8000226:	430a      	orrs	r2, r1
 8000228:	635a      	str	r2, [r3, #52]	; 0x34
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <MX_GPIO_Init+0x28>)
 800022c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800022e:	2201      	movs	r2, #1
 8000230:	4013      	ands	r3, r2
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]

}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	46bd      	mov	sp, r7
 800023a:	b002      	add	sp, #8
 800023c:	bd80      	pop	{r7, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	40021000 	.word	0x40021000

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 f9e2 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f81c 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f7ff ffe2 	bl	8000218 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000254:	f000 f8c6 	bl	80003e4 <MX_TIM16_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 10000);
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x3c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a09      	ldr	r2, [pc, #36]	; (8000284 <main+0x40>)
 800025e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000260:	23fa      	movs	r3, #250	; 0xfa
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	0018      	movs	r0, r3
 8000266:	f000 fa59 	bl	800071c <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1000);
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <main+0x3c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	22fa      	movs	r2, #250	; 0xfa
 8000270:	0092      	lsls	r2, r2, #2
 8000272:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fa4f 	bl	800071c <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 10000);
 800027e:	e7eb      	b.n	8000258 <main+0x14>
 8000280:	20000028 	.word	0x20000028
 8000284:	00002710 	.word	0x00002710

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b093      	sub	sp, #76	; 0x4c
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	2414      	movs	r4, #20
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2334      	movs	r3, #52	; 0x34
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f002 f87b 	bl	8002394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	0018      	movs	r0, r3
 80002a2:	2310      	movs	r3, #16
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f002 f874 	bl	8002394 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ac:	2380      	movs	r3, #128	; 0x80
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fc99 	bl	8000be8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	0052      	lsls	r2, r2, #1
 80002c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2240      	movs	r2, #64	; 0x40
 80002d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2202      	movs	r2, #2
 80002dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2208      	movs	r2, #8
 80002e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2280      	movs	r2, #128	; 0x80
 80002ee:	0292      	lsls	r2, r2, #10
 80002f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	0592      	lsls	r2, r2, #22
 80002f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fcb3 	bl	8000c68 <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000306:	f000 f819 	bl	800033c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2207      	movs	r2, #7
 800030e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2202      	movs	r2, #2
 8000314:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2102      	movs	r1, #2
 8000326:	0018      	movs	r0, r3
 8000328:	f000 ffae 	bl	8001288 <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000330:	f000 f804 	bl	800033c <Error_Handler>
  }
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b013      	add	sp, #76	; 0x4c
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000344:	e7fe      	b.n	8000344 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x44>)
 8000350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <HAL_MspInit+0x44>)
 8000354:	2101      	movs	r1, #1
 8000356:	430a      	orrs	r2, r1
 8000358:	641a      	str	r2, [r3, #64]	; 0x40
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x44>)
 800035c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035e:	2201      	movs	r2, #1
 8000360:	4013      	ands	r3, r2
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_MspInit+0x44>)
 8000368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <HAL_MspInit+0x44>)
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	0549      	lsls	r1, r1, #21
 8000370:	430a      	orrs	r2, r1
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <HAL_MspInit+0x44>)
 8000376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	055b      	lsls	r3, r3, #21
 800037c:	4013      	ands	r3, r2
 800037e:	603b      	str	r3, [r7, #0]
 8000380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b002      	add	sp, #8
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	40021000 	.word	0x40021000

08000390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <NMI_Handler+0x4>

08000396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <HardFault_Handler+0x4>

0800039c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f996 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <TIM16_IRQHandler+0x14>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f9a0 	bl	800170c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	20000028 	.word	0x20000028

080003d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b094      	sub	sp, #80	; 0x50
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ea:	2334      	movs	r3, #52	; 0x34
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	0018      	movs	r0, r3
 80003f0:	231c      	movs	r3, #28
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f001 ffcd 	bl	8002394 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	2334      	movs	r3, #52	; 0x34
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f001 ffc6 	bl	8002394 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000408:	4b37      	ldr	r3, [pc, #220]	; (80004e8 <MX_TIM16_Init+0x104>)
 800040a:	4a38      	ldr	r2, [pc, #224]	; (80004ec <MX_TIM16_Init+0x108>)
 800040c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 800040e:	4b36      	ldr	r3, [pc, #216]	; (80004e8 <MX_TIM16_Init+0x104>)
 8000410:	223f      	movs	r2, #63	; 0x3f
 8000412:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b34      	ldr	r3, [pc, #208]	; (80004e8 <MX_TIM16_Init+0x104>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 800041a:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <MX_TIM16_Init+0x104>)
 800041c:	4a34      	ldr	r2, [pc, #208]	; (80004f0 <MX_TIM16_Init+0x10c>)
 800041e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <MX_TIM16_Init+0x104>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000426:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <MX_TIM16_Init+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042c:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <MX_TIM16_Init+0x104>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <MX_TIM16_Init+0x104>)
 8000434:	0018      	movs	r0, r3
 8000436:	f001 f8b1 	bl	800159c <HAL_TIM_Base_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800043e:	f7ff ff7d 	bl	800033c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <MX_TIM16_Init+0x104>)
 8000444:	0018      	movs	r0, r3
 8000446:	f001 f901 	bl	800164c <HAL_TIM_PWM_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800044e:	f7ff ff75 	bl	800033c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000452:	2134      	movs	r1, #52	; 0x34
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2260      	movs	r2, #96	; 0x60
 8000458:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800047e:	1879      	adds	r1, r7, r1
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <MX_TIM16_Init+0x104>)
 8000482:	2200      	movs	r2, #0
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fa73 	bl	8001970 <HAL_TIM_PWM_ConfigChannel>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800048e:	f7ff ff55 	bl	800033c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000492:	003b      	movs	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000498:	003b      	movs	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800049e:	003b      	movs	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004a4:	003b      	movs	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004aa:	003b      	movs	r3, r7
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b0:	003b      	movs	r3, r7
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0192      	lsls	r2, r2, #6
 80004b6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004be:	003b      	movs	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80004c4:	003a      	movs	r2, r7
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_TIM16_Init+0x104>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fe80 	bl	80021d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 80004d4:	f7ff ff32 	bl	800033c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <MX_TIM16_Init+0x104>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 f832 	bl	8000544 <HAL_TIM_MspPostInit>

}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b014      	add	sp, #80	; 0x50
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000028 	.word	0x20000028
 80004ec:	40014400 	.word	0x40014400
 80004f0:	00004e1f 	.word	0x00004e1f

080004f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_TIM_Base_MspInit+0x48>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d115      	bne.n	8000532 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_TIM_Base_MspInit+0x4c>)
 8000508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <HAL_TIM_Base_MspInit+0x4c>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0289      	lsls	r1, r1, #10
 8000510:	430a      	orrs	r2, r1
 8000512:	641a      	str	r2, [r3, #64]	; 0x40
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <HAL_TIM_Base_MspInit+0x4c>)
 8000516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	029b      	lsls	r3, r3, #10
 800051c:	4013      	ands	r3, r2
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	2015      	movs	r0, #21
 8000528:	f000 f9c8 	bl	80008bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800052c:	2015      	movs	r0, #21
 800052e:	f000 f9da 	bl	80008e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b004      	add	sp, #16
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40014400 	.word	0x40014400
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b089      	sub	sp, #36	; 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	240c      	movs	r4, #12
 800054e:	193b      	adds	r3, r7, r4
 8000550:	0018      	movs	r0, r3
 8000552:	2314      	movs	r3, #20
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f001 ff1c 	bl	8002394 <memset>
  if(timHandle->Instance==TIM16)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_TIM_MspPostInit+0x70>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d122      	bne.n	80005ac <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <HAL_TIM_MspPostInit+0x74>)
 8000568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <HAL_TIM_MspPostInit+0x74>)
 800056c:	2101      	movs	r1, #1
 800056e:	430a      	orrs	r2, r1
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <HAL_TIM_MspPostInit+0x74>)
 8000574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000576:	2201      	movs	r2, #1
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2240      	movs	r2, #64	; 0x40
 8000584:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2202      	movs	r2, #2
 800058a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2205      	movs	r2, #5
 800059c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800059e:	187a      	adds	r2, r7, r1
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 f9ba 	bl	8000920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b009      	add	sp, #36	; 0x24
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	40014400 	.word	0x40014400
 80005b8:	40021000 	.word	0x40021000

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c0:	f7ff ff0a 	bl	80003d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ea:	f001 feaf 	bl	800234c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005ee:	f7ff fe29 	bl	8000244 <main>

080005f2 <LoopForever>:

LoopForever:
  b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000600:	08002458 	.word	0x08002458
  ldr r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000608:	20000078 	.word	0x20000078

0800060c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_IRQHandler>
	...

08000610 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_Init+0x3c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_Init+0x3c>)
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	0049      	lsls	r1, r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062a:	2003      	movs	r0, #3
 800062c:	f000 f810 	bl	8000650 <HAL_InitTick>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d003      	beq.n	800063c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e001      	b.n	8000640 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800063c:	f7ff fe84 	bl	8000348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781b      	ldrb	r3, [r3, #0]
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000658:	230f      	movs	r3, #15
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <HAL_InitTick+0x88>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d02b      	beq.n	80006c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <HAL_InitTick+0x8c>)
 800066a:	681c      	ldr	r4, [r3, #0]
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <HAL_InitTick+0x88>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	0019      	movs	r1, r3
 8000672:	23fa      	movs	r3, #250	; 0xfa
 8000674:	0098      	lsls	r0, r3, #2
 8000676:	f7ff fd43 	bl	8000100 <__udivsi3>
 800067a:	0003      	movs	r3, r0
 800067c:	0019      	movs	r1, r3
 800067e:	0020      	movs	r0, r4
 8000680:	f7ff fd3e 	bl	8000100 <__udivsi3>
 8000684:	0003      	movs	r3, r0
 8000686:	0018      	movs	r0, r3
 8000688:	f000 f93d 	bl	8000906 <HAL_SYSTICK_Config>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d112      	bne.n	80006b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d80a      	bhi.n	80006ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	2301      	movs	r3, #1
 800069a:	425b      	negs	r3, r3
 800069c:	2200      	movs	r2, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f90c 	bl	80008bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_InitTick+0x90>)
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	e00d      	b.n	80006c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006ac:	230f      	movs	r3, #15
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	e008      	b.n	80006c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006b6:	230f      	movs	r3, #15
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
 80006be:	e003      	b.n	80006c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	781b      	ldrb	r3, [r3, #0]
}
 80006ce:	0018      	movs	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b005      	add	sp, #20
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	001a      	movs	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	18d2      	adds	r2, r2, r3
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <HAL_IncTick+0x20>)
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	20000008 	.word	0x20000008
 8000704:	20000074 	.word	0x20000074

08000708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000074 	.word	0x20000074

0800071c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000724:	f7ff fff0 	bl	8000708 <HAL_GetTick>
 8000728:	0003      	movs	r3, r0
 800072a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	d005      	beq.n	8000742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_Delay+0x44>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	001a      	movs	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	189b      	adds	r3, r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	f7ff ffe0 	bl	8000708 <HAL_GetTick>
 8000748:	0002      	movs	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f7      	bhi.n	8000744 <HAL_Delay+0x28>
  {
  }
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b004      	add	sp, #16
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000008 	.word	0x20000008

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b7f      	cmp	r3, #127	; 0x7f
 8000776:	d809      	bhi.n	800078c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	001a      	movs	r2, r3
 800077e:	231f      	movs	r3, #31
 8000780:	401a      	ands	r2, r3
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_EnableIRQ+0x30>)
 8000784:	2101      	movs	r1, #1
 8000786:	4091      	lsls	r1, r2
 8000788:	000a      	movs	r2, r1
 800078a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b7f      	cmp	r3, #127	; 0x7f
 80007ac:	d828      	bhi.n	8000800 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ae:	4a2f      	ldr	r2, [pc, #188]	; (800086c <__NVIC_SetPriority+0xd4>)
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	089b      	lsrs	r3, r3, #2
 80007b8:	33c0      	adds	r3, #192	; 0xc0
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	589b      	ldr	r3, [r3, r2]
 80007be:	1dfa      	adds	r2, r7, #7
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	0011      	movs	r1, r2
 80007c4:	2203      	movs	r2, #3
 80007c6:	400a      	ands	r2, r1
 80007c8:	00d2      	lsls	r2, r2, #3
 80007ca:	21ff      	movs	r1, #255	; 0xff
 80007cc:	4091      	lsls	r1, r2
 80007ce:	000a      	movs	r2, r1
 80007d0:	43d2      	mvns	r2, r2
 80007d2:	401a      	ands	r2, r3
 80007d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	401a      	ands	r2, r3
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	0018      	movs	r0, r3
 80007e4:	2303      	movs	r3, #3
 80007e6:	4003      	ands	r3, r0
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ec:	481f      	ldr	r0, [pc, #124]	; (800086c <__NVIC_SetPriority+0xd4>)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	089b      	lsrs	r3, r3, #2
 80007f6:	430a      	orrs	r2, r1
 80007f8:	33c0      	adds	r3, #192	; 0xc0
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007fe:	e031      	b.n	8000864 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <__NVIC_SetPriority+0xd8>)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	0019      	movs	r1, r3
 8000808:	230f      	movs	r3, #15
 800080a:	400b      	ands	r3, r1
 800080c:	3b08      	subs	r3, #8
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	3306      	adds	r3, #6
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	3304      	adds	r3, #4
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1dfa      	adds	r2, r7, #7
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	0011      	movs	r1, r2
 8000820:	2203      	movs	r2, #3
 8000822:	400a      	ands	r2, r1
 8000824:	00d2      	lsls	r2, r2, #3
 8000826:	21ff      	movs	r1, #255	; 0xff
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	43d2      	mvns	r2, r2
 800082e:	401a      	ands	r2, r3
 8000830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	401a      	ands	r2, r3
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	0018      	movs	r0, r3
 8000840:	2303      	movs	r3, #3
 8000842:	4003      	ands	r3, r0
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <__NVIC_SetPriority+0xd8>)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	001c      	movs	r4, r3
 8000850:	230f      	movs	r3, #15
 8000852:	4023      	ands	r3, r4
 8000854:	3b08      	subs	r3, #8
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	430a      	orrs	r2, r1
 800085a:	3306      	adds	r3, #6
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	18c3      	adds	r3, r0, r3
 8000860:	3304      	adds	r3, #4
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b003      	add	sp, #12
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	e000e100 	.word	0xe000e100
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	045b      	lsls	r3, r3, #17
 8000884:	429a      	cmp	r2, r3
 8000886:	d301      	bcc.n	800088c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000888:	2301      	movs	r3, #1
 800088a:	e010      	b.n	80008ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <SysTick_Config+0x44>)
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	3a01      	subs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	2103      	movs	r1, #3
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff ff7c 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SysTick_Config+0x44>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x44>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	210f      	movs	r1, #15
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	1c02      	adds	r2, r0, #0
 80008cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff5d 	bl	8000798 <__NVIC_SetPriority>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b004      	add	sp, #16
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	0002      	movs	r2, r0
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff33 	bl	8000764 <__NVIC_EnableIRQ>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ffaf 	bl	8000874 <SysTick_Config>
 8000916:	0003      	movs	r3, r0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e147      	b.n	8000bc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4091      	lsls	r1, r2
 800093a:	000a      	movs	r2, r1
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <HAL_GPIO_Init+0x28>
 8000946:	e138      	b.n	8000bba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2203      	movs	r2, #3
 800094e:	4013      	ands	r3, r2
 8000950:	2b01      	cmp	r3, #1
 8000952:	d005      	beq.n	8000960 <HAL_GPIO_Init+0x40>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2203      	movs	r2, #3
 800095a:	4013      	ands	r3, r2
 800095c:	2b02      	cmp	r3, #2
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	43da      	mvns	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	43da      	mvns	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	401a      	ands	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2203      	movs	r2, #3
 80009c8:	4013      	ands	r3, r2
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d017      	beq.n	80009fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	43da      	mvns	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2203      	movs	r2, #3
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d123      	bne.n	8000a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	58d3      	ldr	r3, [r2, r3]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2107      	movs	r1, #7
 8000a36:	400b      	ands	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	6939      	ldr	r1, [r7, #16]
 8000a50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2203      	movs	r2, #3
 8000a70:	401a      	ands	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	029b      	lsls	r3, r3, #10
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d100      	bne.n	8000a94 <HAL_GPIO_Init+0x174>
 8000a92:	e092      	b.n	8000bba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a94:	4a50      	ldr	r2, [pc, #320]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3318      	adds	r3, #24
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	589b      	ldr	r3, [r3, r2]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	220f      	movs	r2, #15
 8000aac:	409a      	lsls	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	43da      	mvns	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	23a0      	movs	r3, #160	; 0xa0
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d013      	beq.n	8000aea <HAL_GPIO_Init+0x1ca>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a45      	ldr	r2, [pc, #276]	; (8000bdc <HAL_GPIO_Init+0x2bc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d00d      	beq.n	8000ae6 <HAL_GPIO_Init+0x1c6>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <HAL_GPIO_Init+0x2c0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d007      	beq.n	8000ae2 <HAL_GPIO_Init+0x1c2>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_GPIO_Init+0x1be>
 8000ada:	2303      	movs	r3, #3
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_Init+0x1cc>
 8000ade:	2305      	movs	r3, #5
 8000ae0:	e004      	b.n	8000aec <HAL_GPIO_Init+0x1cc>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_Init+0x1cc>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x1cc>
 8000aea:	2300      	movs	r3, #0
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	2103      	movs	r1, #3
 8000af0:	400a      	ands	r2, r1
 8000af2:	00d2      	lsls	r2, r2, #3
 8000af4:	4093      	lsls	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000afc:	4936      	ldr	r1, [pc, #216]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3318      	adds	r3, #24
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	43da      	mvns	r2, r3
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	035b      	lsls	r3, r3, #13
 8000b22:	4013      	ands	r3, r2
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43da      	mvns	r2, r3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	039b      	lsls	r3, r3, #14
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000b60:	2384      	movs	r3, #132	; 0x84
 8000b62:	58d3      	ldr	r3, [r2, r3]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43da      	mvns	r2, r3
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	029b      	lsls	r3, r3, #10
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b84:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000b86:	2284      	movs	r2, #132	; 0x84
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	58d3      	ldr	r3, [r2, r3]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bb2:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	40da      	lsrs	r2, r3
 8000bc8:	1e13      	subs	r3, r2, #0
 8000bca:	d000      	beq.n	8000bce <HAL_GPIO_Init+0x2ae>
 8000bcc:	e6b0      	b.n	8000930 <HAL_GPIO_Init+0x10>
  }
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b006      	add	sp, #24
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	50000400 	.word	0x50000400
 8000be0:	50000800 	.word	0x50000800
 8000be4:	50000c00 	.word	0x50000c00

08000be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d11f      	bne.n	8000c4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	0013      	movs	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	189b      	adds	r3, r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4912      	ldr	r1, [pc, #72]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fa70 	bl	8000100 <__udivsi3>
 8000c20:	0003      	movs	r3, r0
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c26:	e008      	b.n	8000c3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e001      	b.n	8000c3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e009      	b.n	8000c4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	401a      	ands	r2, r3
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d0ed      	beq.n	8000c28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40007000 	.word	0x40007000
 8000c5c:	fffff9ff 	.word	0xfffff9ff
 8000c60:	20000000 	.word	0x20000000
 8000c64:	000f4240 	.word	0x000f4240

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e2f3      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4013      	ands	r3, r2
 8000c82:	d100      	bne.n	8000c86 <HAL_RCC_OscConfig+0x1e>
 8000c84:	e07c      	b.n	8000d80 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c86:	4bc3      	ldr	r3, [pc, #780]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2238      	movs	r2, #56	; 0x38
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c90:	4bc0      	ldr	r3, [pc, #768]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2b10      	cmp	r3, #16
 8000c9e:	d102      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x3e>
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d002      	beq.n	8000cac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d10b      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cac:	4bb9      	ldr	r3, [pc, #740]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	029b      	lsls	r3, r3, #10
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d062      	beq.n	8000d7e <HAL_RCC_OscConfig+0x116>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d15e      	bne.n	8000d7e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e2ce      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	025b      	lsls	r3, r3, #9
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d107      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x78>
 8000cd0:	4bb0      	ldr	r3, [pc, #704]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4baf      	ldr	r3, [pc, #700]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	0249      	lsls	r1, r1, #9
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e020      	b.n	8000d22 <HAL_RCC_OscConfig+0xba>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	23a0      	movs	r3, #160	; 0xa0
 8000ce6:	02db      	lsls	r3, r3, #11
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d10e      	bne.n	8000d0a <HAL_RCC_OscConfig+0xa2>
 8000cec:	4ba9      	ldr	r3, [pc, #676]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4ba8      	ldr	r3, [pc, #672]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	02c9      	lsls	r1, r1, #11
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	4ba6      	ldr	r3, [pc, #664]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4ba5      	ldr	r3, [pc, #660]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0249      	lsls	r1, r1, #9
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e00b      	b.n	8000d22 <HAL_RCC_OscConfig+0xba>
 8000d0a:	4ba2      	ldr	r3, [pc, #648]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4ba1      	ldr	r3, [pc, #644]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d10:	49a1      	ldr	r1, [pc, #644]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000d12:	400a      	ands	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	4b9f      	ldr	r3, [pc, #636]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b9e      	ldr	r3, [pc, #632]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	499f      	ldr	r1, [pc, #636]	; (8000f9c <HAL_RCC_OscConfig+0x334>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d014      	beq.n	8000d54 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fced 	bl	8000708 <HAL_GetTick>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fce8 	bl	8000708 <HAL_GetTick>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e28d      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d46:	4b93      	ldr	r3, [pc, #588]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	029b      	lsls	r3, r3, #10
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d0f0      	beq.n	8000d34 <HAL_RCC_OscConfig+0xcc>
 8000d52:	e015      	b.n	8000d80 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d54:	f7ff fcd8 	bl	8000708 <HAL_GetTick>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fcd3 	bl	8000708 <HAL_GetTick>
 8000d62:	0002      	movs	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b64      	cmp	r3, #100	; 0x64
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e278      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d70:	4b88      	ldr	r3, [pc, #544]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	029b      	lsls	r3, r3, #10
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d1f0      	bne.n	8000d5e <HAL_RCC_OscConfig+0xf6>
 8000d7c:	e000      	b.n	8000d80 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2202      	movs	r2, #2
 8000d86:	4013      	ands	r3, r2
 8000d88:	d100      	bne.n	8000d8c <HAL_RCC_OscConfig+0x124>
 8000d8a:	e099      	b.n	8000ec0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d8c:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	2238      	movs	r2, #56	; 0x38
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d96:	4b7f      	ldr	r3, [pc, #508]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	d102      	bne.n	8000dac <HAL_RCC_OscConfig+0x144>
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d002      	beq.n	8000db2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d135      	bne.n	8000e1e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000db2:	4b78      	ldr	r3, [pc, #480]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d005      	beq.n	8000dca <HAL_RCC_OscConfig+0x162>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e24b      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dca:	4b72      	ldr	r3, [pc, #456]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	4a74      	ldr	r2, [pc, #464]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	021a      	lsls	r2, r3, #8
 8000dda:	4b6e      	ldr	r3, [pc, #440]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d112      	bne.n	8000e0c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000de6:	4b6b      	ldr	r3, [pc, #428]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a6e      	ldr	r2, [pc, #440]	; (8000fa4 <HAL_RCC_OscConfig+0x33c>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	0019      	movs	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	4b67      	ldr	r3, [pc, #412]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000dfa:	4b66      	ldr	r3, [pc, #408]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	0adb      	lsrs	r3, r3, #11
 8000e00:	2207      	movs	r2, #7
 8000e02:	4013      	ands	r3, r2
 8000e04:	4a68      	ldr	r2, [pc, #416]	; (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e06:	40da      	lsrs	r2, r3
 8000e08:	4b68      	ldr	r3, [pc, #416]	; (8000fac <HAL_RCC_OscConfig+0x344>)
 8000e0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e0c:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <HAL_RCC_OscConfig+0x348>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff fc1d 	bl	8000650 <HAL_InitTick>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d051      	beq.n	8000ebe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e221      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d030      	beq.n	8000e88 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e26:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a5e      	ldr	r2, [pc, #376]	; (8000fa4 <HAL_RCC_OscConfig+0x33c>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	0019      	movs	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e3a:	4b56      	ldr	r3, [pc, #344]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	0049      	lsls	r1, r1, #1
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc5e 	bl	8000708 <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e52:	f7ff fc59 	bl	8000708 <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e1fe      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e64:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e70:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	4a4a      	ldr	r2, [pc, #296]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	0019      	movs	r1, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	021a      	lsls	r2, r3, #8
 8000e80:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	430a      	orrs	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	e01b      	b.n	8000ec0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000e88:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b41      	ldr	r3, [pc, #260]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000e8e:	4949      	ldr	r1, [pc, #292]	; (8000fb4 <HAL_RCC_OscConfig+0x34c>)
 8000e90:	400a      	ands	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc38 	bl	8000708 <HAL_GetTick>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fc33 	bl	8000708 <HAL_GetTick>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e1d8      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eb0:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d1f0      	bne.n	8000e9e <HAL_RCC_OscConfig+0x236>
 8000ebc:	e000      	b.n	8000ec0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ebe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d047      	beq.n	8000f5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2238      	movs	r2, #56	; 0x38
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b18      	cmp	r3, #24
 8000ed4:	d10a      	bne.n	8000eec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	2202      	movs	r2, #2
 8000edc:	4013      	ands	r3, r2
 8000ede:	d03c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x2f2>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d138      	bne.n	8000f5a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e1ba      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d019      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	430a      	orrs	r2, r1
 8000efe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fc02 	bl	8000708 <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fbfd 	bl	8000708 <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e1a2      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f20:	2202      	movs	r2, #2
 8000f22:	4013      	ands	r3, r2
 8000f24:	d0f1      	beq.n	8000f0a <HAL_RCC_OscConfig+0x2a2>
 8000f26:	e018      	b.n	8000f5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	438a      	bics	r2, r1
 8000f32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fbe8 	bl	8000708 <HAL_GetTick>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fbe3 	bl	8000708 <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e188      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f54:	2202      	movs	r2, #2
 8000f56:	4013      	ands	r3, r2
 8000f58:	d1f1      	bne.n	8000f3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4013      	ands	r3, r2
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x2fe>
 8000f64:	e0c6      	b.n	80010f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	231f      	movs	r3, #31
 8000f68:	18fb      	adds	r3, r7, r3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2238      	movs	r2, #56	; 0x38
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b20      	cmp	r3, #32
 8000f78:	d11e      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_RCC_OscConfig+0x32c>)
 8000f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d100      	bne.n	8000f86 <HAL_RCC_OscConfig+0x31e>
 8000f84:	e0b6      	b.n	80010f4 <HAL_RCC_OscConfig+0x48c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d000      	beq.n	8000f90 <HAL_RCC_OscConfig+0x328>
 8000f8e:	e0b1      	b.n	80010f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e166      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
 8000f94:	40021000 	.word	0x40021000
 8000f98:	fffeffff 	.word	0xfffeffff
 8000f9c:	fffbffff 	.word	0xfffbffff
 8000fa0:	ffff80ff 	.word	0xffff80ff
 8000fa4:	ffffc7ff 	.word	0xffffc7ff
 8000fa8:	00f42400 	.word	0x00f42400
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fb8:	4bac      	ldr	r3, [pc, #688]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8000fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	055b      	lsls	r3, r3, #21
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d101      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x360>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x362>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d011      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4ba7      	ldr	r3, [pc, #668]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8000fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd2:	4ba6      	ldr	r3, [pc, #664]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	0549      	lsls	r1, r1, #21
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fdc:	4ba3      	ldr	r3, [pc, #652]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8000fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	055b      	lsls	r3, r3, #21
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000fea:	231f      	movs	r3, #31
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff2:	4b9f      	ldr	r3, [pc, #636]	; (8001270 <HAL_RCC_OscConfig+0x608>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d11a      	bne.n	8001034 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ffe:	4b9c      	ldr	r3, [pc, #624]	; (8001270 <HAL_RCC_OscConfig+0x608>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b9b      	ldr	r3, [pc, #620]	; (8001270 <HAL_RCC_OscConfig+0x608>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	0049      	lsls	r1, r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800100c:	f7ff fb7c 	bl	8000708 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001016:	f7ff fb77 	bl	8000708 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e11c      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001028:	4b91      	ldr	r3, [pc, #580]	; (8001270 <HAL_RCC_OscConfig+0x608>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4013      	ands	r3, r2
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d106      	bne.n	800104a <HAL_RCC_OscConfig+0x3e2>
 800103c:	4b8b      	ldr	r3, [pc, #556]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800103e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001040:	4b8a      	ldr	r3, [pc, #552]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	65da      	str	r2, [r3, #92]	; 0x5c
 8001048:	e01c      	b.n	8001084 <HAL_RCC_OscConfig+0x41c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b05      	cmp	r3, #5
 8001050:	d10c      	bne.n	800106c <HAL_RCC_OscConfig+0x404>
 8001052:	4b86      	ldr	r3, [pc, #536]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001056:	4b85      	ldr	r3, [pc, #532]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001058:	2104      	movs	r1, #4
 800105a:	430a      	orrs	r2, r1
 800105c:	65da      	str	r2, [r3, #92]	; 0x5c
 800105e:	4b83      	ldr	r3, [pc, #524]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001062:	4b82      	ldr	r3, [pc, #520]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	65da      	str	r2, [r3, #92]	; 0x5c
 800106a:	e00b      	b.n	8001084 <HAL_RCC_OscConfig+0x41c>
 800106c:	4b7f      	ldr	r3, [pc, #508]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800106e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001070:	4b7e      	ldr	r3, [pc, #504]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001072:	2101      	movs	r1, #1
 8001074:	438a      	bics	r2, r1
 8001076:	65da      	str	r2, [r3, #92]	; 0x5c
 8001078:	4b7c      	ldr	r3, [pc, #496]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800107a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800107c:	4b7b      	ldr	r3, [pc, #492]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800107e:	2104      	movs	r1, #4
 8001080:	438a      	bics	r2, r1
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d014      	beq.n	80010b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fb3c 	bl	8000708 <HAL_GetTick>
 8001090:	0003      	movs	r3, r0
 8001092:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001094:	e009      	b.n	80010aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fb37 	bl	8000708 <HAL_GetTick>
 800109a:	0002      	movs	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	4a74      	ldr	r2, [pc, #464]	; (8001274 <HAL_RCC_OscConfig+0x60c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e0db      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010aa:	4b70      	ldr	r3, [pc, #448]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80010ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x42e>
 80010b4:	e013      	b.n	80010de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b6:	f7ff fb27 	bl	8000708 <HAL_GetTick>
 80010ba:	0003      	movs	r3, r0
 80010bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010be:	e009      	b.n	80010d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c0:	f7ff fb22 	bl	8000708 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a6a      	ldr	r2, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x60c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e0c6      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010d4:	4b65      	ldr	r3, [pc, #404]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80010d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80010de:	231f      	movs	r3, #31
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d105      	bne.n	80010f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80010e8:	4b60      	ldr	r3, [pc, #384]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80010ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ec:	4b5f      	ldr	r3, [pc, #380]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80010ee:	4962      	ldr	r1, [pc, #392]	; (8001278 <HAL_RCC_OscConfig+0x610>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x496>
 80010fc:	e0b0      	b.n	8001260 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2238      	movs	r2, #56	; 0x38
 8001104:	4013      	ands	r3, r2
 8001106:	2b10      	cmp	r3, #16
 8001108:	d100      	bne.n	800110c <HAL_RCC_OscConfig+0x4a4>
 800110a:	e078      	b.n	80011fe <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d153      	bne.n	80011bc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001114:	4b55      	ldr	r3, [pc, #340]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b54      	ldr	r3, [pc, #336]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800111a:	4958      	ldr	r1, [pc, #352]	; (800127c <HAL_RCC_OscConfig+0x614>)
 800111c:	400a      	ands	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff faf2 	bl	8000708 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff faed 	bl	8000708 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e092      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	049b      	lsls	r3, r3, #18
 8001144:	4013      	ands	r3, r2
 8001146:	d1f0      	bne.n	800112a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_RCC_OscConfig+0x618>)
 800114e:	4013      	ands	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1a      	ldr	r2, [r3, #32]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	431a      	orrs	r2, r3
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001172:	430a      	orrs	r2, r1
 8001174:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001176:	4b3d      	ldr	r3, [pc, #244]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b3c      	ldr	r3, [pc, #240]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0449      	lsls	r1, r1, #17
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001184:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_RCC_OscConfig+0x604>)
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	0549      	lsls	r1, r1, #21
 800118e:	430a      	orrs	r2, r1
 8001190:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fab9 	bl	8000708 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff fab4 	bl	8000708 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e059      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	049b      	lsls	r3, r3, #18
 80011b6:	4013      	ands	r3, r2
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x534>
 80011ba:	e051      	b.n	8001260 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80011c2:	492e      	ldr	r1, [pc, #184]	; (800127c <HAL_RCC_OscConfig+0x614>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fa9e 	bl	8000708 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fa99 	bl	8000708 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e03e      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	049b      	lsls	r3, r3, #18
 80011ec:	4013      	ands	r3, r2
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_RCC_OscConfig+0x604>)
 80011f6:	4923      	ldr	r1, [pc, #140]	; (8001284 <HAL_RCC_OscConfig+0x61c>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	e030      	b.n	8001260 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e02b      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_RCC_OscConfig+0x604>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2203      	movs	r2, #3
 8001214:	401a      	ands	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	429a      	cmp	r2, r3
 800121c:	d11e      	bne.n	800125c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2270      	movs	r2, #112	; 0x70
 8001222:	401a      	ands	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001228:	429a      	cmp	r2, r3
 800122a:	d117      	bne.n	800125c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	23fe      	movs	r3, #254	; 0xfe
 8001230:	01db      	lsls	r3, r3, #7
 8001232:	401a      	ands	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800123a:	429a      	cmp	r2, r3
 800123c:	d10e      	bne.n	800125c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	23f8      	movs	r3, #248	; 0xf8
 8001242:	039b      	lsls	r3, r3, #14
 8001244:	401a      	ands	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800124a:	429a      	cmp	r2, r3
 800124c:	d106      	bne.n	800125c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	0f5b      	lsrs	r3, r3, #29
 8001252:	075a      	lsls	r2, r3, #29
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b008      	add	sp, #32
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	40021000 	.word	0x40021000
 8001270:	40007000 	.word	0x40007000
 8001274:	00001388 	.word	0x00001388
 8001278:	efffffff 	.word	0xefffffff
 800127c:	feffffff 	.word	0xfeffffff
 8001280:	1fc1808c 	.word	0x1fc1808c
 8001284:	effefffc 	.word	0xeffefffc

08001288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0e9      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800129c:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2207      	movs	r2, #7
 80012a2:	4013      	ands	r3, r2
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d91e      	bls.n	80012e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012aa:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2207      	movs	r2, #7
 80012b0:	4393      	bics	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fa24 	bl	8000708 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012c4:	e009      	b.n	80012da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c6:	f7ff fa1f 	bl	8000708 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4a6a      	ldr	r2, [pc, #424]	; (800147c <HAL_RCC_ClockConfig+0x1f4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e0ca      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012da:	4b67      	ldr	r3, [pc, #412]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2207      	movs	r2, #7
 80012e0:	4013      	ands	r3, r2
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1ee      	bne.n	80012c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2202      	movs	r2, #2
 80012ee:	4013      	ands	r3, r2
 80012f0:	d015      	beq.n	800131e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2204      	movs	r2, #4
 80012f8:	4013      	ands	r3, r2
 80012fa:	d006      	beq.n	800130a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012fc:	4b60      	ldr	r3, [pc, #384]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 8001302:	21e0      	movs	r1, #224	; 0xe0
 8001304:	01c9      	lsls	r1, r1, #7
 8001306:	430a      	orrs	r2, r1
 8001308:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	4a5d      	ldr	r2, [pc, #372]	; (8001484 <HAL_RCC_ClockConfig+0x1fc>)
 8001310:	4013      	ands	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2201      	movs	r2, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d057      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d12b      	bne.n	8001394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e097      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d107      	bne.n	8001358 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	049b      	lsls	r3, r3, #18
 8001350:	4013      	ands	r3, r2
 8001352:	d11f      	bne.n	8001394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e08b      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d107      	bne.n	8001370 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4013      	ands	r3, r2
 800136a:	d113      	bne.n	8001394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e07f      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d106      	bne.n	8001386 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d108      	bne.n	8001394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e074      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	2202      	movs	r2, #2
 800138c:	4013      	ands	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e06d      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001394:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2207      	movs	r2, #7
 800139a:	4393      	bics	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 80013a4:	430a      	orrs	r2, r1
 80013a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013a8:	f7ff f9ae 	bl	8000708 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b0:	e009      	b.n	80013c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b2:	f7ff f9a9 	bl	8000708 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_RCC_ClockConfig+0x1f4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e054      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2238      	movs	r2, #56	; 0x38
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d1ec      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2207      	movs	r2, #7
 80013de:	4013      	ands	r3, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d21e      	bcs.n	8001424 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2207      	movs	r2, #7
 80013ec:	4393      	bics	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013f8:	f7ff f986 	bl	8000708 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001400:	e009      	b.n	8001416 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001402:	f7ff f981 	bl	8000708 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <HAL_RCC_ClockConfig+0x1f4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e02c      	b.n	8001470 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_RCC_ClockConfig+0x1f0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2207      	movs	r2, #7
 800141c:	4013      	ands	r3, r2
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2204      	movs	r2, #4
 800142a:	4013      	ands	r3, r2
 800142c:	d009      	beq.n	8001442 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_RCC_ClockConfig+0x200>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 800143e:	430a      	orrs	r2, r1
 8001440:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001442:	f000 f829 	bl	8001498 <HAL_RCC_GetSysClockFreq>
 8001446:	0001      	movs	r1, r0
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_RCC_ClockConfig+0x1f8>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	220f      	movs	r2, #15
 8001450:	401a      	ands	r2, r3
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_RCC_ClockConfig+0x204>)
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	58d3      	ldr	r3, [r2, r3]
 8001458:	221f      	movs	r2, #31
 800145a:	4013      	ands	r3, r2
 800145c:	000a      	movs	r2, r1
 800145e:	40da      	lsrs	r2, r3
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_ClockConfig+0x208>)
 8001462:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_ClockConfig+0x20c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff f8f1 	bl	8000650 <HAL_InitTick>
 800146e:	0003      	movs	r3, r0
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40022000 	.word	0x40022000
 800147c:	00001388 	.word	0x00001388
 8001480:	40021000 	.word	0x40021000
 8001484:	fffff0ff 	.word	0xfffff0ff
 8001488:	ffff8fff 	.word	0xffff8fff
 800148c:	080023bc 	.word	0x080023bc
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2238      	movs	r2, #56	; 0x38
 80014a4:	4013      	ands	r3, r2
 80014a6:	d10f      	bne.n	80014c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0adb      	lsrs	r3, r3, #11
 80014ae:	2207      	movs	r2, #7
 80014b0:	4013      	ands	r3, r2
 80014b2:	2201      	movs	r2, #1
 80014b4:	409a      	lsls	r2, r3
 80014b6:	0013      	movs	r3, r2
 80014b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	4835      	ldr	r0, [pc, #212]	; (8001594 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014be:	f7fe fe1f 	bl	8000100 <__udivsi3>
 80014c2:	0003      	movs	r3, r0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	e05d      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2238      	movs	r2, #56	; 0x38
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d102      	bne.n	80014da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_RCC_GetSysClockFreq+0x100>)
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	e054      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2238      	movs	r2, #56	; 0x38
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d138      	bne.n	8001558 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2203      	movs	r2, #3
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	2207      	movs	r2, #7
 80014f8:	4013      	ands	r3, r2
 80014fa:	3301      	adds	r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d10d      	bne.n	8001520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	4824      	ldr	r0, [pc, #144]	; (8001598 <HAL_RCC_GetSysClockFreq+0x100>)
 8001508:	f7fe fdfa 	bl	8000100 <__udivsi3>
 800150c:	0003      	movs	r3, r0
 800150e:	0019      	movs	r1, r3
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	227f      	movs	r2, #127	; 0x7f
 8001518:	4013      	ands	r3, r2
 800151a:	434b      	muls	r3, r1
 800151c:	617b      	str	r3, [r7, #20]
        break;
 800151e:	e00d      	b.n	800153c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001524:	f7fe fdec 	bl	8000100 <__udivsi3>
 8001528:	0003      	movs	r3, r0
 800152a:	0019      	movs	r1, r3
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	227f      	movs	r2, #127	; 0x7f
 8001534:	4013      	ands	r3, r2
 8001536:	434b      	muls	r3, r1
 8001538:	617b      	str	r3, [r7, #20]
        break;
 800153a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0f5b      	lsrs	r3, r3, #29
 8001542:	2207      	movs	r2, #7
 8001544:	4013      	ands	r3, r2
 8001546:	3301      	adds	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	6978      	ldr	r0, [r7, #20]
 800154e:	f7fe fdd7 	bl	8000100 <__udivsi3>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	e015      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2238      	movs	r2, #56	; 0x38
 800155e:	4013      	ands	r3, r2
 8001560:	2b20      	cmp	r3, #32
 8001562:	d103      	bne.n	800156c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2238      	movs	r2, #56	; 0x38
 8001572:	4013      	ands	r3, r2
 8001574:	2b18      	cmp	r3, #24
 8001576:	d103      	bne.n	8001580 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001578:	23fa      	movs	r3, #250	; 0xfa
 800157a:	01db      	lsls	r3, r3, #7
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e001      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001584:	693b      	ldr	r3, [r7, #16]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b006      	add	sp, #24
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40021000 	.word	0x40021000
 8001594:	00f42400 	.word	0x00f42400
 8001598:	007a1200 	.word	0x007a1200

0800159c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e04a      	b.n	8001644 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	223d      	movs	r2, #61	; 0x3d
 80015b2:	5c9b      	ldrb	r3, [r3, r2]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d107      	bne.n	80015ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	223c      	movs	r2, #60	; 0x3c
 80015be:	2100      	movs	r1, #0
 80015c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7fe ff95 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	223d      	movs	r2, #61	; 0x3d
 80015ce:	2102      	movs	r1, #2
 80015d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3304      	adds	r3, #4
 80015da:	0019      	movs	r1, r3
 80015dc:	0010      	movs	r0, r2
 80015de:	f000 faef 	bl	8001bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2248      	movs	r2, #72	; 0x48
 80015e6:	2101      	movs	r1, #1
 80015e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	223e      	movs	r2, #62	; 0x3e
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	223f      	movs	r2, #63	; 0x3f
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	2101      	movs	r1, #1
 8001600:	5499      	strb	r1, [r3, r2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2241      	movs	r2, #65	; 0x41
 8001606:	2101      	movs	r1, #1
 8001608:	5499      	strb	r1, [r3, r2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2242      	movs	r2, #66	; 0x42
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2243      	movs	r2, #67	; 0x43
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2244      	movs	r2, #68	; 0x44
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2245      	movs	r2, #69	; 0x45
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2246      	movs	r2, #70	; 0x46
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2247      	movs	r2, #71	; 0x47
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	223d      	movs	r2, #61	; 0x3d
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e04a      	b.n	80016f4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	223d      	movs	r2, #61	; 0x3d
 8001662:	5c9b      	ldrb	r3, [r3, r2]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d107      	bne.n	800167a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	223c      	movs	r2, #60	; 0x3c
 800166e:	2100      	movs	r1, #0
 8001670:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f841 	bl	80016fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	223d      	movs	r2, #61	; 0x3d
 800167e:	2102      	movs	r1, #2
 8001680:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	0019      	movs	r1, r3
 800168c:	0010      	movs	r0, r2
 800168e:	f000 fa97 	bl	8001bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2248      	movs	r2, #72	; 0x48
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	223e      	movs	r2, #62	; 0x3e
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	223f      	movs	r2, #63	; 0x3f
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2241      	movs	r2, #65	; 0x41
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2242      	movs	r2, #66	; 0x42
 80016be:	2101      	movs	r1, #1
 80016c0:	5499      	strb	r1, [r3, r2]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2243      	movs	r2, #67	; 0x43
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2244      	movs	r2, #68	; 0x44
 80016ce:	2101      	movs	r1, #1
 80016d0:	5499      	strb	r1, [r3, r2]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2245      	movs	r2, #69	; 0x45
 80016d6:	2101      	movs	r1, #1
 80016d8:	5499      	strb	r1, [r3, r2]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2246      	movs	r2, #70	; 0x46
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2247      	movs	r2, #71	; 0x47
 80016e6:	2101      	movs	r1, #1
 80016e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	223d      	movs	r2, #61	; 0x3d
 80016ee:	2101      	movs	r1, #1
 80016f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b002      	add	sp, #8
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	2b02      	cmp	r3, #2
 8001720:	d124      	bne.n	800176c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	2b02      	cmp	r3, #2
 800172e:	d11d      	bne.n	800176c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2203      	movs	r2, #3
 8001736:	4252      	negs	r2, r2
 8001738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	d004      	beq.n	8001756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	0018      	movs	r0, r3
 8001750:	f000 fa1e 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001754:	e007      	b.n	8001766 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fa11 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f000 fa1d 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2204      	movs	r2, #4
 8001774:	4013      	ands	r3, r2
 8001776:	2b04      	cmp	r3, #4
 8001778:	d125      	bne.n	80017c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2204      	movs	r2, #4
 8001782:	4013      	ands	r3, r2
 8001784:	2b04      	cmp	r3, #4
 8001786:	d11e      	bne.n	80017c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2205      	movs	r2, #5
 800178e:	4252      	negs	r2, r2
 8001790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	d004      	beq.n	80017b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 f9f1 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 80017ae:	e007      	b.n	80017c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 f9e4 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 f9f0 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	2208      	movs	r2, #8
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d124      	bne.n	800181e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2208      	movs	r2, #8
 80017dc:	4013      	ands	r3, r2
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11d      	bne.n	800181e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2209      	movs	r2, #9
 80017e8:	4252      	negs	r2, r2
 80017ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2204      	movs	r2, #4
 80017f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	2203      	movs	r2, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	d004      	beq.n	8001808 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f000 f9c5 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001806:	e007      	b.n	8001818 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f9b8 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	0018      	movs	r0, r3
 8001814:	f000 f9c4 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2210      	movs	r2, #16
 8001826:	4013      	ands	r3, r2
 8001828:	2b10      	cmp	r3, #16
 800182a:	d125      	bne.n	8001878 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2210      	movs	r2, #16
 8001834:	4013      	ands	r3, r2
 8001836:	2b10      	cmp	r3, #16
 8001838:	d11e      	bne.n	8001878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2211      	movs	r2, #17
 8001840:	4252      	negs	r2, r2
 8001842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2208      	movs	r2, #8
 8001848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	23c0      	movs	r3, #192	; 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d004      	beq.n	8001862 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0018      	movs	r0, r3
 800185c:	f000 f998 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001860:	e007      	b.n	8001872 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f000 f98b 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	f000 f997 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2201      	movs	r2, #1
 8001880:	4013      	ands	r3, r2
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10f      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	4013      	ands	r3, r2
 8001890:	2b01      	cmp	r3, #1
 8001892:	d108      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2202      	movs	r2, #2
 800189a:	4252      	negs	r2, r2
 800189c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f965 	bl	8001b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b80      	cmp	r3, #128	; 0x80
 80018b2:	d10f      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	4013      	ands	r3, r2
 80018be:	2b80      	cmp	r3, #128	; 0x80
 80018c0:	d108      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2281      	movs	r2, #129	; 0x81
 80018c8:	4252      	negs	r2, r2
 80018ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 fd2c 	bl	800232c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	401a      	ands	r2, r3
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d10e      	bne.n	8001906 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b80      	cmp	r3, #128	; 0x80
 80018f4:	d107      	bne.n	8001906 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_TIM_IRQHandler+0x260>)
 80018fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fd1b 	bl	800233c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	4013      	ands	r3, r2
 8001910:	2b40      	cmp	r3, #64	; 0x40
 8001912:	d10f      	bne.n	8001934 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2240      	movs	r2, #64	; 0x40
 800191c:	4013      	ands	r3, r2
 800191e:	2b40      	cmp	r3, #64	; 0x40
 8001920:	d108      	bne.n	8001934 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2241      	movs	r2, #65	; 0x41
 8001928:	4252      	negs	r2, r2
 800192a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	0018      	movs	r0, r3
 8001930:	f000 f93e 	bl	8001bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2220      	movs	r2, #32
 800193c:	4013      	ands	r3, r2
 800193e:	2b20      	cmp	r3, #32
 8001940:	d10f      	bne.n	8001962 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	4013      	ands	r3, r2
 800194c:	2b20      	cmp	r3, #32
 800194e:	d108      	bne.n	8001962 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2221      	movs	r2, #33	; 0x21
 8001956:	4252      	negs	r2, r2
 8001958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 fcdd 	bl	800231c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	fffffeff 	.word	0xfffffeff

08001970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800197c:	2317      	movs	r3, #23
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	223c      	movs	r2, #60	; 0x3c
 8001988:	5c9b      	ldrb	r3, [r3, r2]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_TIM_PWM_ConfigChannel+0x22>
 800198e:	2302      	movs	r3, #2
 8001990:	e0e5      	b.n	8001b5e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	223c      	movs	r2, #60	; 0x3c
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b14      	cmp	r3, #20
 800199e:	d900      	bls.n	80019a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80019a0:	e0d1      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	4b70      	ldr	r3, [pc, #448]	; (8001b68 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80019a8:	18d3      	adds	r3, r2, r3
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	0011      	movs	r1, r2
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f96e 	bl	8001c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2108      	movs	r1, #8
 80019c8:	430a      	orrs	r2, r1
 80019ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2104      	movs	r1, #4
 80019d8:	438a      	bics	r2, r1
 80019da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6999      	ldr	r1, [r3, #24]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	619a      	str	r2, [r3, #24]
      break;
 80019ee:	e0af      	b.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 f9cd 	bl	8001d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	0109      	lsls	r1, r1, #4
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4954      	ldr	r1, [pc, #336]	; (8001b6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6999      	ldr	r1, [r3, #24]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	021a      	lsls	r2, r3, #8
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	619a      	str	r2, [r3, #24]
      break;
 8001a34:	e08c      	b.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 fa28 	bl	8001e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2108      	movs	r1, #8
 8001a50:	430a      	orrs	r2, r1
 8001a52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2104      	movs	r1, #4
 8001a60:	438a      	bics	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69d9      	ldr	r1, [r3, #28]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	61da      	str	r2, [r3, #28]
      break;
 8001a76:	e06b      	b.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fa89 	bl	8001f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0109      	lsls	r1, r1, #4
 8001a94:	430a      	orrs	r2, r1
 8001a96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4932      	ldr	r1, [pc, #200]	; (8001b6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69d9      	ldr	r1, [r3, #28]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	021a      	lsls	r2, r3, #8
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	61da      	str	r2, [r3, #28]
      break;
 8001abc:	e048      	b.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 faca 	bl	8002060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2108      	movs	r1, #8
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	438a      	bics	r2, r1
 8001aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001afe:	e027      	b.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	0011      	movs	r1, r2
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 fb03 	bl	8002114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0109      	lsls	r1, r1, #4
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4910      	ldr	r1, [pc, #64]	; (8001b6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	021a      	lsls	r2, r3, #8
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b44:	e004      	b.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001b46:	2317      	movs	r3, #23
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	223c      	movs	r2, #60	; 0x3c
 8001b54:	2100      	movs	r1, #0
 8001b56:	5499      	strb	r1, [r3, r2]

  return status;
 8001b58:	2317      	movs	r3, #23
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b006      	add	sp, #24
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	080023fc 	.word	0x080023fc
 8001b6c:	fffffbff 	.word	0xfffffbff

08001b70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <TIM_Base_SetConfig+0xc0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <TIM_Base_SetConfig+0x20>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <TIM_Base_SetConfig+0xc4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d108      	bne.n	8001bf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2270      	movs	r2, #112	; 0x70
 8001be4:	4393      	bics	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <TIM_Base_SetConfig+0xc0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00f      	beq.n	8001c1a <TIM_Base_SetConfig+0x5a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <TIM_Base_SetConfig+0xc4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00b      	beq.n	8001c1a <TIM_Base_SetConfig+0x5a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a20      	ldr	r2, [pc, #128]	; (8001c88 <TIM_Base_SetConfig+0xc8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <TIM_Base_SetConfig+0x5a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <TIM_Base_SetConfig+0xcc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d003      	beq.n	8001c1a <TIM_Base_SetConfig+0x5a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <TIM_Base_SetConfig+0xd0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d108      	bne.n	8001c2c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <TIM_Base_SetConfig+0xd4>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	4393      	bics	r3, r2
 8001c32:	001a      	movs	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <TIM_Base_SetConfig+0xc0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <TIM_Base_SetConfig+0xaa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <TIM_Base_SetConfig+0xcc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d003      	beq.n	8001c6a <TIM_Base_SetConfig+0xaa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <TIM_Base_SetConfig+0xd0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d103      	bne.n	8001c72 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	615a      	str	r2, [r3, #20]
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b004      	add	sp, #16
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40012c00 	.word	0x40012c00
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40002000 	.word	0x40002000
 8001c8c:	40014400 	.word	0x40014400
 8001c90:	40014800 	.word	0x40014800
 8001c94:	fffffcff 	.word	0xfffffcff

08001c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4393      	bics	r3, r2
 8001caa:	001a      	movs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <TIM_OC1_SetConfig+0xe8>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4393      	bics	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4393      	bics	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <TIM_OC1_SetConfig+0xec>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <TIM_OC1_SetConfig+0x6e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <TIM_OC1_SetConfig+0xf0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <TIM_OC1_SetConfig+0x6e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <TIM_OC1_SetConfig+0xf4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10c      	bne.n	8001d20 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2208      	movs	r2, #8
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <TIM_OC1_SetConfig+0xec>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d007      	beq.n	8001d38 <TIM_OC1_SetConfig+0xa0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <TIM_OC1_SetConfig+0xf0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d003      	beq.n	8001d38 <TIM_OC1_SetConfig+0xa0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <TIM_OC1_SetConfig+0xf4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d111      	bne.n	8001d5c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <TIM_OC1_SetConfig+0xf8>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <TIM_OC1_SetConfig+0xfc>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	621a      	str	r2, [r3, #32]
}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b006      	add	sp, #24
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	fffeff8f 	.word	0xfffeff8f
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40014400 	.word	0x40014400
 8001d8c:	40014800 	.word	0x40014800
 8001d90:	fffffeff 	.word	0xfffffeff
 8001d94:	fffffdff 	.word	0xfffffdff

08001d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	2210      	movs	r2, #16
 8001da8:	4393      	bics	r3, r2
 8001daa:	001a      	movs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4a2c      	ldr	r2, [pc, #176]	; (8001e78 <TIM_OC2_SetConfig+0xe0>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <TIM_OC2_SetConfig+0xe4>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2220      	movs	r2, #32
 8001de2:	4393      	bics	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <TIM_OC2_SetConfig+0xe8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10d      	bne.n	8001e16 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	4393      	bics	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	4393      	bics	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <TIM_OC2_SetConfig+0xe8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <TIM_OC2_SetConfig+0x96>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <TIM_OC2_SetConfig+0xec>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d003      	beq.n	8001e2e <TIM_OC2_SetConfig+0x96>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <TIM_OC2_SetConfig+0xf0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d113      	bne.n	8001e56 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <TIM_OC2_SetConfig+0xf4>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <TIM_OC2_SetConfig+0xf8>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	621a      	str	r2, [r3, #32]
}
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b006      	add	sp, #24
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	feff8fff 	.word	0xfeff8fff
 8001e7c:	fffffcff 	.word	0xfffffcff
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800
 8001e8c:	fffffbff 	.word	0xfffffbff
 8001e90:	fffff7ff 	.word	0xfffff7ff

08001e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <TIM_OC3_SetConfig+0xdc>)
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a2d      	ldr	r2, [pc, #180]	; (8001f74 <TIM_OC3_SetConfig+0xe0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	4393      	bics	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <TIM_OC3_SetConfig+0xe4>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <TIM_OC3_SetConfig+0xe8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10d      	bne.n	8001f0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <TIM_OC3_SetConfig+0xec>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <TIM_OC3_SetConfig+0xf0>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <TIM_OC3_SetConfig+0xe8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <TIM_OC3_SetConfig+0x92>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <TIM_OC3_SetConfig+0xf4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_OC3_SetConfig+0x92>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <TIM_OC3_SetConfig+0xf8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d113      	bne.n	8001f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <TIM_OC3_SetConfig+0xfc>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <TIM_OC3_SetConfig+0x100>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	621a      	str	r2, [r3, #32]
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b006      	add	sp, #24
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	fffffeff 	.word	0xfffffeff
 8001f74:	fffeff8f 	.word	0xfffeff8f
 8001f78:	fffffdff 	.word	0xfffffdff
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	fffff7ff 	.word	0xfffff7ff
 8001f84:	fffffbff 	.word	0xfffffbff
 8001f88:	40014400 	.word	0x40014400
 8001f8c:	40014800 	.word	0x40014800
 8001f90:	ffffefff 	.word	0xffffefff
 8001f94:	ffffdfff 	.word	0xffffdfff

08001f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a26      	ldr	r2, [pc, #152]	; (8002040 <TIM_OC4_SetConfig+0xa8>)
 8001fa8:	401a      	ands	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <TIM_OC4_SetConfig+0xac>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <TIM_OC4_SetConfig+0xb0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4a1b      	ldr	r2, [pc, #108]	; (800204c <TIM_OC4_SetConfig+0xb4>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	031b      	lsls	r3, r3, #12
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a17      	ldr	r2, [pc, #92]	; (8002050 <TIM_OC4_SetConfig+0xb8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <TIM_OC4_SetConfig+0x70>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <TIM_OC4_SetConfig+0xbc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_OC4_SetConfig+0x70>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <TIM_OC4_SetConfig+0xc0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d109      	bne.n	800201c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4a14      	ldr	r2, [pc, #80]	; (800205c <TIM_OC4_SetConfig+0xc4>)
 800200c:	4013      	ands	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	621a      	str	r2, [r3, #32]
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b006      	add	sp, #24
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	ffffefff 	.word	0xffffefff
 8002044:	feff8fff 	.word	0xfeff8fff
 8002048:	fffffcff 	.word	0xfffffcff
 800204c:	ffffdfff 	.word	0xffffdfff
 8002050:	40012c00 	.word	0x40012c00
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800
 800205c:	ffffbfff 	.word	0xffffbfff

08002060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <TIM_OC5_SetConfig+0x9c>)
 8002070:	401a      	ands	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <TIM_OC5_SetConfig+0xa0>)
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <TIM_OC5_SetConfig+0xa4>)
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <TIM_OC5_SetConfig+0xa8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_OC5_SetConfig+0x66>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <TIM_OC5_SetConfig+0xac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_OC5_SetConfig+0x66>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a13      	ldr	r2, [pc, #76]	; (8002110 <TIM_OC5_SetConfig+0xb0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d109      	bne.n	80020da <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <TIM_OC5_SetConfig+0x9c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	621a      	str	r2, [r3, #32]
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b006      	add	sp, #24
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	fffeffff 	.word	0xfffeffff
 8002100:	fffeff8f 	.word	0xfffeff8f
 8002104:	fffdffff 	.word	0xfffdffff
 8002108:	40012c00 	.word	0x40012c00
 800210c:	40014400 	.word	0x40014400
 8002110:	40014800 	.word	0x40014800

08002114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <TIM_OC6_SetConfig+0xa0>)
 8002124:	401a      	ands	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <TIM_OC6_SetConfig+0xa4>)
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <TIM_OC6_SetConfig+0xa8>)
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	051b      	lsls	r3, r3, #20
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <TIM_OC6_SetConfig+0xac>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <TIM_OC6_SetConfig+0x68>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <TIM_OC6_SetConfig+0xb0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_OC6_SetConfig+0x68>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <TIM_OC6_SetConfig+0xb4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d109      	bne.n	8002190 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <TIM_OC6_SetConfig+0xb8>)
 8002180:	4013      	ands	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	621a      	str	r2, [r3, #32]
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b006      	add	sp, #24
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	ffefffff 	.word	0xffefffff
 80021b8:	feff8fff 	.word	0xfeff8fff
 80021bc:	ffdfffff 	.word	0xffdfffff
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800
 80021cc:	fffbffff 	.word	0xfffbffff

080021d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	223c      	movs	r2, #60	; 0x3c
 80021e2:	5c9b      	ldrb	r3, [r3, r2]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e079      	b.n	80022e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	223c      	movs	r2, #60	; 0x3c
 80021f0:	2101      	movs	r1, #1
 80021f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	22ff      	movs	r2, #255	; 0xff
 80021f8:	4393      	bics	r3, r2
 80021fa:	001a      	movs	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a38      	ldr	r2, [pc, #224]	; (80022e8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002208:	401a      	ands	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a35      	ldr	r2, [pc, #212]	; (80022ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002216:	401a      	ands	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002224:	401a      	ands	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002232:	401a      	ands	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002240:	401a      	ands	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800224e:	401a      	ands	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800225c:	401a      	ands	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d106      	bne.n	8002280 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4a24      	ldr	r2, [pc, #144]	; (8002308 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002276:	401a      	ands	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d121      	bne.n	80022ce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800228e:	401a      	ands	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	051b      	lsls	r3, r3, #20
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800229e:	401a      	ands	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80022ac:	401a      	ands	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d106      	bne.n	80022ce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a15      	ldr	r2, [pc, #84]	; (8002318 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80022c4:	401a      	ands	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	223c      	movs	r2, #60	; 0x3c
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	fffffcff 	.word	0xfffffcff
 80022ec:	fffffbff 	.word	0xfffffbff
 80022f0:	fffff7ff 	.word	0xfffff7ff
 80022f4:	ffffefff 	.word	0xffffefff
 80022f8:	ffffdfff 	.word	0xffffdfff
 80022fc:	ffffbfff 	.word	0xffffbfff
 8002300:	fff0ffff 	.word	0xfff0ffff
 8002304:	40012c00 	.word	0x40012c00
 8002308:	efffffff 	.word	0xefffffff
 800230c:	ff0fffff 	.word	0xff0fffff
 8002310:	feffffff 	.word	0xfeffffff
 8002314:	fdffffff 	.word	0xfdffffff
 8002318:	dfffffff 	.word	0xdfffffff

0800231c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <__libc_init_array>:
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	2600      	movs	r6, #0
 8002350:	4d0c      	ldr	r5, [pc, #48]	; (8002384 <__libc_init_array+0x38>)
 8002352:	4c0d      	ldr	r4, [pc, #52]	; (8002388 <__libc_init_array+0x3c>)
 8002354:	1b64      	subs	r4, r4, r5
 8002356:	10a4      	asrs	r4, r4, #2
 8002358:	42a6      	cmp	r6, r4
 800235a:	d109      	bne.n	8002370 <__libc_init_array+0x24>
 800235c:	2600      	movs	r6, #0
 800235e:	f000 f821 	bl	80023a4 <_init>
 8002362:	4d0a      	ldr	r5, [pc, #40]	; (800238c <__libc_init_array+0x40>)
 8002364:	4c0a      	ldr	r4, [pc, #40]	; (8002390 <__libc_init_array+0x44>)
 8002366:	1b64      	subs	r4, r4, r5
 8002368:	10a4      	asrs	r4, r4, #2
 800236a:	42a6      	cmp	r6, r4
 800236c:	d105      	bne.n	800237a <__libc_init_array+0x2e>
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	00b3      	lsls	r3, r6, #2
 8002372:	58eb      	ldr	r3, [r5, r3]
 8002374:	4798      	blx	r3
 8002376:	3601      	adds	r6, #1
 8002378:	e7ee      	b.n	8002358 <__libc_init_array+0xc>
 800237a:	00b3      	lsls	r3, r6, #2
 800237c:	58eb      	ldr	r3, [r5, r3]
 800237e:	4798      	blx	r3
 8002380:	3601      	adds	r6, #1
 8002382:	e7f2      	b.n	800236a <__libc_init_array+0x1e>
 8002384:	08002450 	.word	0x08002450
 8002388:	08002450 	.word	0x08002450
 800238c:	08002450 	.word	0x08002450
 8002390:	08002454 	.word	0x08002454

08002394 <memset>:
 8002394:	0003      	movs	r3, r0
 8002396:	1882      	adds	r2, r0, r2
 8002398:	4293      	cmp	r3, r2
 800239a:	d100      	bne.n	800239e <memset+0xa>
 800239c:	4770      	bx	lr
 800239e:	7019      	strb	r1, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	e7f9      	b.n	8002398 <memset+0x4>

080023a4 <_init>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023aa:	bc08      	pop	{r3}
 80023ac:	469e      	mov	lr, r3
 80023ae:	4770      	bx	lr

080023b0 <_fini>:
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b6:	bc08      	pop	{r3}
 80023b8:	469e      	mov	lr, r3
 80023ba:	4770      	bx	lr
